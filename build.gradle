/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/java_library_plugin.html
 */


// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'

sourceCompatibility = 1.8 
compileJava.options.encoding = 'UTF-8'    
  
sourceSets {
    main {
        java {
            srcDirs=['src/main/java']
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
}



configure(allprojects) { project ->
	group = "cn.jedisoft"
	version = "0.1"

	ext.springVersion   = "4.3.8.RELEASE"
	ext.gsonVersion = "2.8.0"
	ext.log4jVersion = "1.2.17"
	ext.freemarkerVersion = "2.3.23"
	ext.sqliteVersion = "3.16.1"
	ext.druidVersion = "1.0.31"
	ext.commonsIoVersion = "2.5"
	ext.servletApiVersion = "3.1.0"
}



dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
   // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:20.0'

    // Use JUnit test framework
    testCompile("junit:junit:4.12")
    
    compileOnly("javax.servlet:javax.servlet-api:${servletApiVersion}")
    compile("commons-io:commons-io:${commonsIoVersion}")
    
    compile("log4j:log4j:${log4jVersion}")
    compile("com.google.code.gson:gson:${gsonVersion}")
    compile("org.freemarker:freemarker:${freemarkerVersion}")
    compile("org.xerial:sqlite-jdbc:${sqliteVersion}")
    compile("com.alibaba:druid:${druidVersion}")
    compile("org.springframework:spring-core:${springVersion}")
    compile("org.springframework:spring-context:${springVersion}")
    compile("org.springframework:spring-beans:${springVersion}")
    compile("org.springframework:spring-web:${springVersion}")
}

//依赖编译，然后打包JAR
task taskJar(type:Jar, dependsOn: compileJava) {
    from 'bin/classes'
    destinationDir = file('bin/libs')
}

//清除上次的编译过的文件
task clearPj(type:Delete){
   delete 'build','target'
}


//把JAR复制到目标目录
task release(type: Copy,dependsOn: [clearPj,taskJar]) {
    from('build/libs') {
        include '*.jar'
    }
    into ('target')
}
